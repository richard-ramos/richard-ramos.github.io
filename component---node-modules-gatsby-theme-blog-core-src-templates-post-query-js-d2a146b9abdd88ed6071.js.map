{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./src/gatsby-theme-blog/components/post-footer.js","webpack:///./node_modules/gatsby-theme-blog/src/components/post.js","webpack:///./node_modules/gatsby-theme-blog-core/src/templates/post-query.js","webpack:///./node_modules/gatsby-theme-blog/src/gatsby-theme-blog-core/components/post.js"],"names":["MDXRenderer","require","module","React","useMDXComponents","mdx","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn","previous","next","css","mt","pt","as","flexWrap","justifyContent","listStyle","padding","to","rel","Post","data","post","title","site","siteMetadata","location","description","excerpt","h1","p","fontSize","mb","date","body","PostPage","blogPost","query"],"mappings":"gFAMA,IAAMA,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,6yECTf,IAAMG,EAAQF,EAAd,Q,EACkCA,EAAQ,QAAlCG,E,EAAAA,iBAAkBC,E,EAAAA,IAClBC,EAAgBL,EAAQ,QAAxBK,YAERJ,UAAiB,SAAqB,GAKlC,IAJFK,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBP,EAAtB,GACMQ,EAAWN,EAFhB,GAKKO,EAAMV,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMW,EAAS,GAGbX,MAHa,EAIbE,OAJF,GAQMU,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACV,EAlBJ,IAoBA,OAAON,EAAA,mBAA2BK,WAAYG,GAA9C,M,6LCOF,EArCe,SAAC,GAAD,IAAGS,EAAH,WAAaC,EAAb,cACb,sBACEC,IAAKA,YAAI,CACPC,GADO,EAEPC,GAAI,KAGN,YAAC,IAAD,GANF,OAOIJ,GAAD,IACC,iBACEK,GADF,KAEEH,IAAKA,YAAI,CACPI,SADO,OAEPC,eAFO,gBAGPC,UAHO,OAIPC,QAAS,KAGX,sBACGT,GACC,YAAC,IAAD,GAAUK,GAAV,IAAoBK,GAAIV,EAAxB,KAAuCW,IAAI,QAA3C,KACKX,EAZX,QAgBE,sBACGC,GACC,YAAC,IAAD,GAAUI,GAAV,IAAoBK,GAAIT,EAAxB,KAAmCU,IAAI,QACpCV,EADH,MA3BG,U,oCCkCAW,EA9BF,SAAC,GAAD,QACXC,KACEC,EAFS,EAETA,KAEkBC,EAJT,EAGTC,KACEC,aAAgBF,MAGpBG,EAPW,EAOXA,SACAlB,EARW,EAQXA,SACAC,EATW,EASXA,KATW,OAWX,YAAC,IAAD,CAAQiB,SAAUA,EAAUH,MAAOA,GACjC,YAAC,IAAD,CAAKA,MAAOD,EAAKC,MAAOI,YAAaL,EAAKM,UAC1C,wBACE,YAAC,IAAOC,GAAR,KAAYP,EAAKC,OACjB,YAAC,IAAOO,EAAR,CACEpB,IAAKA,YAAI,CACPqB,SAAU,EACVpB,IAAK,EACLqB,GAAI,KAGLV,EAAKW,MAER,YAAC,cAAD,KAAcX,EAAKY,OAErB,YAAC,EAAe,CAAE1B,WAAUC,W,urBC/BjB0B,UCAA,YAAyB,IAAtBT,EAAqB,EAArBA,SAAUL,EAAW,EAAXA,KAClBe,EAA6Bf,EAA7Be,SAAU5B,EAAmBa,EAAnBb,SAAUC,EAASY,EAATZ,KAE5B,OACE,YAAC,EAAD,CACEY,KAAI,KAAOA,EAAP,CAAaC,KAAMc,IACvBV,SAAUA,EACVlB,SAAUA,EACVC,KAAMA,KARG,IDEF4B,EAAK","file":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js-d2a146b9abdd88ed6071.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { css, Styled, Flex } from \"theme-ui\"\n\nconst Footer = ({ previous, next }) => (\n  <footer\n    css={css({\n      mt: 4,\n      pt: 3,\n    })}\n  >\n    <Styled.hr />\n    {(previous || next) && (\n      <Flex\n        as=\"ul\"\n        css={css({\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        })}\n      >\n        <li>\n          {previous && (\n            <Styled.a as={Link} to={previous.slug} rel=\"prev\">\n              ← {previous.title}\n            </Styled.a>\n          )}\n        </li>\n        <li>\n          {next && (\n            <Styled.a as={Link} to={next.slug} rel=\"next\">\n              {next.title} →\n            </Styled.a>\n          )}\n        </li>\n      </Flex>\n    )}\n  </footer>\n)\n\nexport default Footer\n","import React from \"react\"\nimport { Styled, css } from \"theme-ui\"\n\nimport PostFooter from \"../components/post-footer\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\n\nconst Post = ({\n  data: {\n    post,\n    site: {\n      siteMetadata: { title },\n    },\n  },\n  location,\n  previous,\n  next,\n}) => (\n  <Layout location={location} title={title}>\n    <SEO title={post.title} description={post.excerpt} />\n    <main>\n      <Styled.h1>{post.title}</Styled.h1>\n      <Styled.p\n        css={css({\n          fontSize: 1,\n          mt: -3,\n          mb: 3,\n        })}\n      >\n        {post.date}\n      </Styled.p>\n      <MDXRenderer>{post.body}</MDXRenderer>\n    </main>\n    <PostFooter {...{ previous, next }} />\n  </Layout>\n)\n\nexport default Post\n","import { graphql } from \"gatsby\"\nimport PostPage from \"../components/post\"\n\nexport default PostPage\n\nexport const query = graphql`\n  query PostPageQuery($id: String!, $previousId: String, $nextId: String) {\n    site {\n      siteMetadata {\n        title\n        social {\n          name\n          url\n        }\n      }\n    }\n    blogPost(id: { eq: $id }) {\n      id\n      excerpt\n      body\n      slug\n      title\n      tags\n      keywords\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n    previous: blogPost(id: { eq: $previousId }) {\n      id\n      excerpt\n      slug\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n    next: blogPost(id: { eq: $nextId }) {\n      id\n      excerpt\n      slug\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n  }\n`\n","import React from \"react\"\nimport Post from \"../../components/post\"\n\nexport default ({ location, data }) => {\n  const { blogPost, previous, next } = data\n\n  return (\n    <Post\n      data={{ ...data, post: blogPost }}\n      location={location}\n      previous={previous}\n      next={next}\n    />\n  )\n}\n"],"sourceRoot":""}